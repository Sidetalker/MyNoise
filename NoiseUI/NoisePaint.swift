//
//  NoisePaint.swift
//  MyNoise
//
//  Created by Kevin Sullivan on 3/31/17.
//  Copyright Â© 2017 SideApps. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class NoisePaint : NSObject {

    //// Drawing Methods

    public dynamic class func drawPlay(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), buttonFill: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000), number: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Bezier Drawing
        context.saveGState()
        context.scaleBy(x: number, y: 1)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: -0))
        bezierPath.addLine(to: CGPoint(x: 100, y: 50))
        bezierPath.addLine(to: CGPoint(x: 0, y: 100))
        bezierPath.addLine(to: CGPoint(x: 0, y: -0))
        bezierPath.close()
        buttonFill.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    public dynamic class func drawPause(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), buttonFill: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX, y: frame.minY, width: 30, height: frame.height))
        buttonFill.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: frame.minX + frame.width - 30, y: frame.minY, width: 30, height: frame.height))
        buttonFill.setFill()
        rectangle2Path.fill()
    }

    public dynamic class func drawColorScheme(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 50, y: 95))
        bezierPath.addLine(to: CGPoint(x: 50, y: 5))
        bezierPath.addLine(to: CGPoint(x: 27, y: 11))
        bezierPath.addLine(to: CGPoint(x: 9, y: 29))
        bezierPath.addLine(to: CGPoint(x: 4, y: 57))
        bezierPath.addLine(to: CGPoint(x: 9, y: 71))
        bezierPath.addLine(to: CGPoint(x: 27, y: 88))
        bezierPath.addLine(to: CGPoint(x: 50, y: 95))
        bezierPath.close()
        UIColor.gray.setFill()
        bezierPath.fill()
        UIColor.black.setStroke()
        bezierPath.lineWidth = 5
        bezierPath.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 90, height: 90))
        UIColor.black.setStroke()
        ovalPath.lineWidth = 10
        ovalPath.stroke()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
